// Generated by CoffeeScript 1.7.1
(function() {
  var AdapterPostgreSQL, Migration, Q, pg;

  pg = require('pg');

  Q = require('q');

  Migration = require('../migration');

  AdapterPostgreSQL = (function() {
    function AdapterPostgreSQL() {
      this.db = new App.DB;
    }

    AdapterPostgreSQL.prototype.migration = function(name, entityClass) {
      return new Migration(name, entityClass);
    };

    AdapterPostgreSQL.prototype.query = function(query, params) {
      var deferred;
      deferred = Q.defer();
      pg.connect(this.db.dsn(), function(err, client, done) {
        if (err) {
          done();
          deferred.reject(new Error(err));
          return console.error('error fetching client from pool', err);
        }
        return client.query(query, params, function(err, result) {
          done();
          if (err) {
            deferred.reject(new Error(err));
            return console.error('error running query', query, err);
          } else {
            return deferred.resolve(result);
          }
        });
      });
      return deferred.promise;
    };

    AdapterPostgreSQL.prototype.getOne = function(name, uuid) {
      return this.query("SELECT * FROM " + name + " WHERE \"uuid\" = $1", [uuid]).then(function(result) {
        return result.rows[0];
      });
    };

    AdapterPostgreSQL.prototype.getAll = function(name) {
      return this.query("SELECT * FROM " + name);
    };

    AdapterPostgreSQL.prototype.saveOne = function(name, uuid, entity) {
      return this.query("SELECT \"uuid\" FROM " + name + " WHERE \"uuid\" = $1", [uuid]).then((function(_this) {
        return function(result) {
          var column, columns, fields, i, params, sql, val, values;
          fields = entity.constructor._fields[entity.constructor.name];
          columns = (function() {
            var _results;
            _results = [];
            for (column in fields) {
              _results.push(column);
            }
            return _results;
          })();
          values = (function() {
            var _results;
            _results = [];
            for (column in fields) {
              _results.push(entity[column]);
            }
            return _results;
          })();
          params = (function() {
            var _i, _len, _results;
            _results = [];
            for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
              val = values[i];
              _results.push('$' + ++i);
            }
            return _results;
          })();
          if (result.rows.length) {
            sql = "UPDATE " + name + " SET (" + columns + ") = (" + params + ") WHERE \"uuid\" = '" + uuid + "'";
          } else {
            sql = "INSERT INTO " + name + " (" + columns + ") VALUES (" + params + ")";
          }
          return _this.query(sql, values);
        };
      })(this));
    };

    AdapterPostgreSQL.prototype.deleteOne = function(name, uuid) {
      return this.query("DELETE FROM " + name + " WHERE \"uuid\" = $1", [uuid]).then(function(result) {
        return console.log(result);
      });
    };

    return AdapterPostgreSQL;

  })();

  module.exports = AdapterPostgreSQL;

}).call(this);
