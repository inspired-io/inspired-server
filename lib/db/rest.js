// Generated by CoffeeScript 1.7.1
(function() {
  var AdapterRestAPI, Q, http;

  http = require('http');

  Q = require('q');

  AdapterRestAPI = (function() {
    function AdapterRestAPI(options) {
      this.options = options != null ? options : {};
    }

    AdapterRestAPI.prototype.migration = function(name, entityClass) {};

    AdapterRestAPI.prototype.query = function(method, path, data) {
      var deferred, options, request;
      deferred = Q.defer();
      options = {
        host: this.options.host || 'localhost',
        port: this.options.port || 8765,
        method: method,
        path: path
      };
      request = http.request(options, function(response) {
        var result;
        result = '';
        response.on('data', function(chunk) {
          return result += chunk;
        });
        return response.on('end', function() {
          if (result !== "") {
            return deferred.resolve(JSON.parse(result));
          } else {
            return deferred.resolve();
          }
        });
      });
      request.on('error', function(e) {
        return deferred.reject(e);
      });
      if (data != null) {
        request.write(data);
      }
      request.end();
      return deferred.promise;
    };

    AdapterRestAPI.prototype.getOne = function(name, uuid) {
      return this.query('GET', "/" + name + "/" + uuid);
    };

    AdapterRestAPI.prototype.getAll = function(name) {
      return this.query('GET', "/" + name);
    };

    AdapterRestAPI.prototype.saveOne = function(name, uuid, entity) {
      if (uuid != null) {
        return this.query('PUT', "/" + name + "/" + uuid, JSON.stringify(entity));
      } else {
        return this.query('POST', "/" + name, JSON.stringify(entity));
      }
    };

    AdapterRestAPI.prototype.deleteOne = function(name, uuid) {
      return this.query('DELETE', "/" + name + "/" + uuid);
    };

    return AdapterRestAPI;

  })();

  module.exports = AdapterRestAPI;

}).call(this);
