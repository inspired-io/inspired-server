// Generated by CoffeeScript 1.7.1
(function() {
  var Default, Field, Q, _Base,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Field = require('./field');

  Q = require('q');

  _Base = (function() {
    _Base._fields = {};

    _Base._db;

    function _Base(data) {
      var prop;
      if (this.constructor._db == null) {
        this.constructor._db = new App.DB;
      }
      if (this.constructor._fields[this.constructor.name] == null) {
        this.constructor._fields[this.constructor.name] = {};
      }
      for (prop in this) {
        if (!(this[prop] instanceof Field._Base)) {
          continue;
        }
        this.constructor._fields[this.constructor.name][prop] = this[prop];
        this[prop] = this.constructor._fields[this.constructor.name][prop]["default"]();
      }
      this._setProperties(data);
    }

    _Base.prototype._setProperties = function(data) {
      var key, val, _results;
      _results = [];
      for (key in data) {
        val = data[key];
        _results.push(this[key] = val);
      }
      return _results;
    };

    _Base.prototype._tableName = function() {
      return this.constructor.name.toLowerCase();
    };

    return _Base;

  })();

  Default = (function(_super) {
    __extends(Default, _super);

    function Default() {
      return Default.__super__.constructor.apply(this, arguments);
    }

    Default.prototype.uuid = new Field.Uuid();

    Default.prototype.load = function(uuid) {
      return this.constructor._db.adapter().getOne(this._tableName(), uuid).then((function(_this) {
        return function(result) {
          return _this._setProperties(result);
        };
      })(this));
    };

    Default.prototype.validate = function() {
      var column, errors, field, fields;
      fields = this.constructor._fields[this.constructor.name];
      errors = (function() {
        var _results;
        _results = [];
        for (column in fields) {
          field = fields[column];
          if (!field.isValid(this[column])) {
            _results.push(column);
          }
        }
        return _results;
      }).call(this);
      return {
        errors: errors,
        isValid: !errors.length
      };
    };

    Default.prototype.save = function() {
      var deferred, validation;
      deferred = Q.defer();
      validation = this.validate();
      if (validation.isValid === true) {
        this.constructor._db.adapter().saveOne(this._tableName(), this.uuid, this).then(function(result) {
          return deferred.resolve(result);
        });
      } else {
        deferred.reject(validation);
      }
      return deferred.promise;
    };

    Default.prototype["delete"] = function() {
      return this.constructor._db.adapter().deleteOne(this._tableName(), this.uuid).then(function() {
        return delete this;
      });
    };

    return Default;

  })(_Base);

  module.exports = {
    _Base: _Base,
    Default: Default
  };

}).call(this);
