// Generated by CoffeeScript 1.7.1
(function() {
  var Migration;

  Migration = (function() {
    function Migration(table, entityClass) {
      var fieldsInCode, name, sql;
      this.table = table;
      this.entityClass = entityClass;
      this.db = new App.DB;
      this.instance = new this.entityClass;
      this.fields = this.entityClass._fields[this.instance.constructor.name];
      fieldsInCode = (function() {
        var _results;
        _results = [];
        for (name in this.fields) {
          _results.push(name);
        }
        return _results;
      }).call(this);
      sql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name='" + this.table + "'";
      this.db.adapter().query(sql, []).then((function(_this) {
        return function(result) {

          /*
          					Index the result set by column name.
          					The input is numerically keyed but the
          					output uses the column name as the key.
           */
          var column, defaultChange, field, fieldsInDB, inBoth, length, lengthChange, onlyInCode, onlyInDB, queries, row, rows, sqlLength, typeChange, _i, _j, _k, _len, _len1, _len2;
          rows = result.rows.reduce(function(rows, row) {
            rows[row.column_name] = row;
            return rows;
          }, {});
          fieldsInDB = Object.keys(rows);
          onlyInDB = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = fieldsInDB.length; _i < _len; _i++) {
              name = fieldsInDB[_i];
              if (fieldsInCode.indexOf(name) < 0) {
                _results.push(name);
              }
            }
            return _results;
          })();
          onlyInCode = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = fieldsInCode.length; _i < _len; _i++) {
              name = fieldsInCode[_i];
              if (fieldsInDB.indexOf(name) < 0) {
                _results.push(name);
              }
            }
            return _results;
          })();
          inBoth = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = fieldsInCode.length; _i < _len; _i++) {
              name = fieldsInCode[_i];
              if (fieldsInDB.indexOf(name) >= 0) {
                _results.push(name);
              }
            }
            return _results;
          })();
          queries = [];
          for (_i = 0, _len = onlyInDB.length; _i < _len; _i++) {
            column = onlyInDB[_i];
            queries.push("ALTER TABLE \"" + _this.table + "\" DROP IF EXISTS \"" + column + "\" CASCADE");
          }
          for (_j = 0, _len1 = onlyInCode.length; _j < _len1; _j++) {
            column = onlyInCode[_j];
            field = _this.fields[column];
            length = field.length() ? "(" + (field.length()) + ")" : '';
            queries.push("ALTER TABLE \"" + _this.table + "\" ADD \"" + column + "\" " + (field.type()) + length);
          }
          for (_k = 0, _len2 = inBoth.length; _k < _len2; _k++) {
            column = inBoth[_k];
            field = _this.fields[column];
            row = rows[column];
            sql = "";
            typeChange = field.type() !== row.udt_name;
            lengthChange = field.length() !== row.character_maximum_length;
            defaultChange = field["default"]() !== row.column_default;
            sqlLength = field.length() ? "(" + (field.length()) + ")" : '';
            if (typeChange || lengthChange) {
              sql += " TYPE " + (field.type()) + sqlLength;
            }
            if (defaultChange) {
              sql += " SET DEFAULT " + (field["default"]());
            }
            if (sql) {
              sql = ("ALTER TABLE \"" + _this.table + "\" ALTER \"" + column + "\"") + sql;
            }
            if (sql) {
              queries.push(sql);
            }
          }

          /*
          					1. Make sure the table exists or create it
          					2. Run all the queries to migrate the schema
           */
          return _this.db.adapter().query("CREATE TABLE IF NOT EXISTS \"" + _this.table + "\" ()", []).then(function(result) {
            var _l, _len3, _results;
            if (queries.length) {
              console.log(queries);
            }
            _results = [];
            for (_l = 0, _len3 = queries.length; _l < _len3; _l++) {
              sql = queries[_l];
              _results.push(_this.db.adapter().query(sql, []).then(function(result) {}));
            }
            return _results;
          });
        };
      })(this));
    }

    return Migration;

  })();

  module.exports = Migration;

}).call(this);
