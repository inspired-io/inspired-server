// Generated by CoffeeScript 1.7.1
(function() {
  var Rest, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  uuid = require('node-uuid');

  Rest = (function() {
    function Rest() {
      this.handler = __bind(this.handler, this);
      this.db = new App.DB;
    }

    Rest.prototype.handler = function(request, response) {
      var collection, entityClass, instance, router;
      router = new App.Router(request);
      if (!router.isValid()) {
        console.warn('400', router.url);
        response.writeHead(400);
        response.end();
      }
      if (request.headers.origin != null) {
        response.setHeader('Access-Control-Allow-Origin', request.headers.origin);
        response.setHeader('Access-Control-Allow-Credentials', 'true');
        response.setHeader('Access-Control-Allow-Methods', 'HEAD,GET,PUT,POST,PATCH,LINK,UNLINK,DELETE');
      }
      entityClass = this.db.registry(router.name);
      console.log(entityClass, 'EC', this.db.constructor._registry);
      if (router.id) {
        switch (request.method) {
          case 'HEAD':
            response.writeHead(501, "Not Implemented");
            return response.end();
          case 'GET':
            instance = new entityClass;
            return instance.load(router.id).then(function() {
              response.writeHead(200, {
                'Content-Type': 'application/json'
              });
              return response.end(JSON.stringify(instance));
            });
          case 'PUT':
            return request.readJSON().then(function(data) {
              instance = new entityClass(data);
              return instance.save().then(function() {
                response.writeHead(200);
                return response.end();
              });
            });
          case 'POST':
            response.writeHead(405, 'Method Not Allowed');
            return response.end();
          case 'PATCH':
            response.writeHead(501, "Not Implemented");
            return response.end();
          case 'LINK':
            response.writeHead(501, "Not Implemented");
            return response.end();
          case 'UNLINK':
            response.writeHead(501, "Not Implemented");
            return response.end();
          case 'DELETE':
            instance = new entityClass;
            return instance.load(router.id).then(function() {
              return instance["delete"]().then(function() {
                response.writeHead(200);
                return response.end();
              });
            });
          case 'OPTIONS':
            response.writeHead(200, {
              Allow: 'HEAD, GET, PUT, PATCH, LINK, UNLINK, DELETE'
            });
            return response.end();
          default:
            response.writeHead(405, 'Method Not Allowed', {
              Allow: 'HEAD, GET, PUT, PATCH, LINK, UNLINK, DELETE'
            });
            return response.end();
        }
      } else if (router.name) {
        collection = this.db.collection(router.name);
        switch (request.method) {
          case 'HEAD':
            response.writeHead(501, "Not Implemented");
            return response.end();
          case 'GET':
            return collection.load().then(function() {
              response.writeHead(200, {
                'Content-Type': 'application/json'
              });
              return response.end(JSON.stringify(collection.toArray()));
            });
          case 'PUT':
            response.writeHead(501, "Not Implemented");
            return response.end();
          case 'POST':
            return request.readJSON().then(function(data) {
              instance = new entityClass(data);
              console.log('HERE 2');
              instance.uuid = uuid.v4();
              console.log('HERE 3');
              return instance.save().then(function(result) {
                console.log('HERE 4');
                response.writeHead(303, 'See Other', {
                  Location: '/' + router.name + '/' + instance.uuid
                });
                return response.end();
              });
            })["catch"](function(e) {
              response.writeHead(503, {
                'Content-Type': 'application/json'
              });
              response.write(JSON.stringify(e));
              return response.end();
            });
          case 'PATCH':
            response.writeHead(405, 'Method Not Allowed');
            return response.end();
          case 'LINK':
            response.writeHead(405, 'Method Not Allowed');
            return response.end();
          case 'UNLINK':
            response.writeHead(405, 'Method Not Allowed');
            return response.end();
          case 'DELETE':
            response.writeHead(501, "Not Implemented");
            return response.end();
          case 'OPTIONS':
            response.writeHead(200, {
              Allow: 'HEAD, GET, PUT, POST, DELETE'
            });
            return response.end();
          default:
            response.writeHead(405, {
              Allow: 'HEAD, GET, PUT, POST, DELETE'
            });
            return response.end();
        }
      }
    };

    return Rest;

  })();

  module.exports = Rest;

}).call(this);
