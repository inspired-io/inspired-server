// Generated by CoffeeScript 1.7.1
(function() {
  var Meta, Q, browserify, coffee, fs, through, url,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  fs = require('fs');

  url = require('url');

  browserify = require('browserify');

  coffee = require('coffee-script');

  through = require('through');

  Meta = (function() {
    Meta.prototype.bundles = {};

    Meta.prototype.bundleOptions = {
      '/bundle.js': {},
      '/bundle.min.js': {},
      '/bundle.dev.js': {
        debug: true
      },
      '/bundle.node.js': {
        insertGlobalVars: ['__filename', '__dirname'],
        options: {
          builtins: false,
          commondir: false
        }
      }
    };

    function Meta() {
      this.handler = __bind(this.handler, this);
      this.db = new App.DB;
    }

    Meta.prototype.getBrowserify = function(options) {
      var b, bTransform;
      if (options == null) {
        options = {};
      }
      bTransform = function(_path) {
        var data, write;
        data = '';
        write = function(buf) {
          return data += buf;
        };
        return through(write, function() {
          if (_path.slice(-6) === 'coffee') {
            this.queue(coffee.compile(data));
          } else {
            this.queue(data);
          }
          return this.queue(null);
        });
      };
      b = browserify(options);
      b.ignore('coffee-script');
      b.ignore('browserify');
      b.ignore('through');
      b.add(process.mainModule.filename);
      b.transform(bTransform);
      return b;
    };

    Meta.prototype.loadBundle = function(path) {
      var args, bundleString, deferred;
      deferred = Q.defer();
      if (this.bundles[path] != null) {
        deferred.resolve(this.bundles[path]);
      } else {
        args = this.bundleOptions[path];
        bundleString = '';
        this.getBrowserify(args.options).bundle(args).on('data', function(chunk) {
          return bundleString += chunk;
        }).on('end', (function(_this) {
          return function() {
            _this.bundles[path] = bundleString;
            return deferred.resolve(bundleString);
          };
        })(this));
      }
      return deferred.promise;
    };

    Meta.prototype.loadFile = function(path) {
      var deferred;
      deferred = Q.defer();
      fs.readFile(path, 'ascii', (function(_this) {
        return function(err, content) {
          if (err) {
            return deferred.reject(err);
          }
          return deferred.resolve(content);
        };
      })(this));
      return deferred.promise;
    };

    Meta.prototype.handler = function(request, response) {
      url = url.parse(request.url);
      return this.loadBundle(url.path).then(function(bundleString) {
        response.writeHead(200, {
          'Content-Type': 'text/javascript'
        });
        response.write(bundleString);
        return response.end();
      })["catch"](function(e) {
        response.writeHead(404);
        return response.end();
      });
    };

    return Meta;

  })();

  module.exports = Meta;

}).call(this);
